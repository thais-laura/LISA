#include <AccelStepper.h>

// Definições de pinos para o motor da cabeça
#define STEP_PIN1 14
#define DIR_PIN1 12

// Definições de pinos para o motor do braço
#define STEP_PIN2 5
#define DIR_PIN2 18

#define STEP_PIN3 19
#define DIR_PIN3 21

#define STEP_PIN4 26
#define DIR_PIN4 33

#define IN41 23
#define IN42 22
#define IN43 4
#define IN44 2

#define LED_BUILTIN 2

// Criação dos objetos stepper para a cabeça e o braço
AccelStepper stepperSIM(1, STEP_PIN1, DIR_PIN1);
AccelStepper stepperNAO(1, STEP_PIN2, DIR_PIN2);
AccelStepper stepperESQ(1, STEP_PIN3, DIR_PIN3);
AccelStepper stepperBASE(1, STEP_PIN4, DIR_PIN4);
AccelStepper stepperDIR(8, IN41, IN43, IN42, IN44);

// Definição dos passos por graus
const int passosPor90Graus = 113;
const int passosPor60Graus = 75;
const int passosPor120Graus = 150;
int ent;

void setup() {
  // Inicia a comunicação serial com 115200 baud rate.
  Serial.begin(115200);
  
  // Configura o pino do LED como saída
  pinMode(LED_BUILTIN, OUTPUT);
  
  stepperSIM.setMaxSpeed(1000);
  stepperSIM.setAcceleration(500);

  stepperNAO.setMaxSpeed(1000);
  stepperNAO.setAcceleration(500);

  stepperESQ.setMaxSpeed(1000);
  stepperESQ.setAcceleration(500);

  stepperDIR.setMaxSpeed(1000);
  stepperDIR.setAcceleration(500);

  ent = 0;
}

// O motor pode girar sem parar, que a cabeça vai ficar fazendo sim
void positivo() {
  static unsigned long lastMillis = 0;
  stepperSIM.setSpeed(500);
  stepperSIM.runSpeed(); 
  for(int i=0; i<3; i++){
    long lastMillis = 0;
  if (millis() - lastMillis > 5000) {
    stepperSIM.setSpeed(500); 
    stepperSIM.runSpeed();
    lastMillis = millis();
  }
  }
}

void negativo() {
  // Move para a posição inicial (90 graus)
  stepperNAO.moveTo(passosPor90Graus);
  while (stepperNAO.distanceToGo() != 0) {
    stepperNAO.run();
  }

  for (int i = 0; i < 3; i++) {
    // Move de 90 a 120 graus
    for (int pos = passosPor90Graus; pos <= passosPor120Graus; pos += 3) {
      stepperNAO.moveTo(pos);
      while (stepperNAO.distanceToGo() != 0) {
        stepperNAO.run();
      }
      delay(50);
    }

    // Move de 120 a 60 graus
    for (int pos = passosPor120Graus; pos >= passosPor60Graus; pos -= 3) {
      stepperNAO.moveTo(pos);
      while (stepperNAO.distanceToGo() != 0) {
        stepperNAO.run();
      }
      delay(50);
    }

    // Move de 60 a 90 graus
    for (int pos = passosPor60Graus; pos <= passosPor90Graus; pos += 3) {
      stepperNAO.moveTo(pos);
      while (stepperNAO.distanceToGo() != 0) {
        stepperNAO.run();
      }
      delay(50);
    }
  }

  // Volta para a posição inicial (90 graus)
  stepperNAO.moveTo(passosPor90Graus);
  while (stepperNAO.distanceToGo() != 0) {
    stepperNAO.run();
  }
}

void bracoDireito() {
  // Sobe o braço 90 graus (113 passos)
  stepperDIR.moveTo(passosPor90Graus);
  while (stepperDIR.distanceToGo() != 0) {
    stepperDIR.run();
  }
  delay(500);  // Pausa de meio segundo no topo

  // Volta o braço para a posição inicial
  stepperDIR.moveTo(0);
  while (stepperDIR.distanceToGo() != 0) {
    stepperDIR.run();
  }
}

void bracoEsquerdo() {
  // Sobe o braço 90 graus (113 passos)
  for(int i = 0; i<3; i++){
  stepperESQ.moveTo(passosPor90Graus);
  while (stepperESQ.distanceToGo() != 0) {
    stepperESQ.run();
  }
  delay(500);  // Pausa de meio segundo no topo

  // Volta o braço para a posição inicial
  stepperESQ.moveTo(0);
  while (stepperESQ.distanceToGo() != 0) {
    stepperESQ.run();
  }
  }
}

void base() {
  // Gira a base 90 graus (113 passos)
  stepperBASE.moveTo(passosPor90Graus);
  while (stepperBASE.distanceToGo() != 0) {
    stepperBASE.run();
  }
  delay(500);  // Pausa de meio segundo no topo

  // Volta a base para a posição inicial
  stepperBASE.moveTo(0);
  while (stepperBASE.distanceToGo() != 0) {
    stepperBASE.run();
  }
}

void loop() {
  // Modifique este valor para testar diferentes funções: 0, 1, 2, 3
  /*ent = 0;
  if(ent == 0){
    positivo();
    ent = 3;
  }if(ent == 1){
    negativo();
    ent = 2;
  }if(ent == 2){
    bracoDireito();
    ent = 0;
  }if(ent == 3){
    bracoEsquerdo();
    ent = 4;
  }if(ent == 4){
    base();
    ent = 0;
  }*/

  static unsigned long lastMillis = 0;
  stepperSIM.setSpeed(500);
  stepperSIM.runSpeed(); 
  for(int i=0; i<3; i++){
    long lastMillis = 0;
  if (millis() - lastMillis > 5000) {
    stepperSIM.setSpeed(500); 
    stepperSIM.runSpeed();
    lastMillis = millis();
  }
  }
  
}
